#!/bin/bash
# extract - Universal Archive Extraction Script
# Synopsis: extract [-h] [-r] [-v] file [file...]
# Implements all requirements from the homework assignment.

# Add debug option
DEBUG=false

# Function to print debug messages
debug() {
    if $DEBUG; then
        echo "DEBUG: $@" >&2
    fi
}

# Track processed files to avoid duplicates
declare -A processed_files

# Helper function for handling compression with extensions
handle_compression() {
    local file="$1"
    local command="$2"
    local extension="$3"
    local options="$4"

    dir=$(dirname "$file")
    filename=$(basename "$file")
    
    # Check if file already ends with the correct extension
    if [[ "$filename" == *"$extension" ]]; then
        temp_file="$file"
    else
        temp_file="${dir}/${filename}${extension}"
        debug "Creating temporary file with ${extension} extension: $temp_file"
        orig_perms=$(stat -f %p "$file")
        debug "Original file permissions: $orig_perms"
        mv "$file" "$temp_file"
    fi
    
    if $command $options "$temp_file"; then
        debug "$command successful, removing temporary file"
        uncompressed_file="${temp_file%.*}"
        if [[ "$uncompressed_file" != "$file" ]]; then
            mv "$uncompressed_file" "$file"
        fi
        decompressed_count=$((decompressed_count + 1))
        debug "$command decompression successful"
        return 0
    else
        echo "Error decompressing ($command): $file"
        debug "$command decompression failed"
        failed_count=$((failed_count + 1))
        # Only remove temp file if we created one
        if [[ "$temp_file" != "$file" ]]; then
            rm -f "$temp_file"
        fi
        return 1
    fi
}

# ==============================================================================
# Help Function: -h Should receive a HELP notice
# ==============================================================================
help_function() {
    echo "Usage: extract [-h] [-r] [-v] [-x] file [file...]"
    echo "  -h: Show help message"
    echo "  -r: Recursively unpack files in subdirectories"
    echo "  -v: Verbose output"
    echo "  -x: Enable debug output"
    echo "  --gunzip-opts : Additional options for gunzip"
    echo "  --bunzip2-opts : Additional options for bunzip2"
    echo "  --unzip-opts : Additional options for unzip"
    echo "  --compress-opts : Additional options for compress"
    exit 0
}

# ==============================================================================
# Argument Parsing with getopts: handles -h, -r, -v, and compression options
# ==============================================================================
recursive=false
verbose=false
gunzip_opts=""
bunzip2_opts=""
unzip_opts=""
compress_opts=""

while getopts "hrvx" opt; do
    case $opt in
        h) help_function ;;
        r) recursive=true ;;
        v) verbose=true ;;
        x) DEBUG=true ;;
        \?) echo "Invalid option: -$OPTARG" >&2
            help_function
            exit 1 ;;
    esac
done
shift $((OPTIND - 1))

# Check if any files were provided
if [ $# -eq 0 ]; then
    echo "Error: No files provided"
    help_function
    exit 1
fi

# Parse long options (compression options)
while [[ $# -gt 0 ]]; do
    case "$1" in
        --gunzip-opts)
            gunzip_opts="$2"
            shift 2
            ;;
        --bunzip2-opts)
            bunzip2_opts="$2"
            shift 2
            ;;
        --unzip-opts)
            unzip_opts="$2"
            shift 2
            ;;
        --compress-opts)
            compress_opts="$2"
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

# ==============================================================================
# Main Loop: Given a list of filenames as input, this script queries each target file
# ==============================================================================
decompressed_count=0
failed_count=0
skipped_directories=0

# Function to process a single file (for recursion)
process_file() {
    local file="$1"
    # Get canonical path to avoid duplicates
    file=$(cd "$(dirname "$file")" && pwd)/$(basename "$file")
    
    # Check if file was already processed
    if [[ ${processed_files[$file]} ]]; then
        debug "Skipping already processed file: $file"
        return
    fi
    processed_files[$file]=1
    
    debug "Processing file: $file"

    # Check if file exists
    if [[ ! -e "$file" ]]; then
        debug "File does not exist: $file"
        echo "File not found: $file"
        failed_count=$((failed_count + 1))
        return
    fi

    # ==============================================================================
    # File Type Detection: parsing the output of the file command
    # Note that file names and extensions have no meaning - the only way to know what method to use is through the file command!
    # ==============================================================================
    file_type=$(file "$file")
    debug "File type detected: $file_type"

    # ==============================================================================
    # If a target file is not compressed, the script takes no other action on that particular file.
    # ==============================================================================
    # Decompression Logic: invokes the appropriate decompression command, putting files in the same folder.
    # If files with the same name already exist, they are overwritten.
    # Unpack should support 4 unpacking options - gunzip, bunzip2, unzip, uncompress. Adding more options should be VERY simple.
    # ==============================================================================
    if [[ "$file_type" == *"gzip compressed"* ]]; then
        if $verbose; then echo "Decompressing (gunzip): $file"; fi
        debug "Attempting gunzip decompression"
        handle_compression "$file" "gunzip" ".gz" "$gunzip_opts"
    elif [[ "$file_type" == *"bzip2 compressed"* ]]; then
        if $verbose; then echo "Decompressing (bunzip2): $file"; fi
        debug "Attempting bunzip2 decompression"
        handle_compression "$file" "bunzip2" ".bz2" "$bunzip2_opts"
    elif [[ "$file_type" == *"Zip archive"* ]]; then
        if $verbose; then echo "Decompressing (unzip): $file"; fi
        debug "Attempting unzip decompression"
        unzip $unzip_opts -o "$file" -d "$(dirname "$file")"  # unzip is special case
        if [[ $? -eq 0 ]]; then
            decompressed_count=$((decompressed_count + 1))
            debug "Unzip decompression successful"
        else
            echo "Error decompressing (unzip): $file"
            debug "Unzip decompression failed"
            failed_count=$((failed_count + 1))
        fi
    elif [[ "$file_type" == *"compress'd"* ]]; then
        if $verbose; then echo "Decompressing (uncompress): $file"; fi
        debug "Attempting uncompress decompression"
        handle_compression "$file" "uncompress" ".Z" "$compress_opts"
    else
        # ==============================================================================
        # If a target file is not compressed, the script takes no other action on that particular file.
        # ==============================================================================
        debug "File is not compressed or compression type not recognized"
        echo "Skipping: Unsupported compression type or not a compressed file: $file"
        failed_count=$((failed_count + 1))
    fi
}

# ==============================================================================
# Recursive Handling: will traverse contents of folders recursively, performing unpack on each.
# ==============================================================================
# Process each file in the argument list
for file in "$@"; do
    debug "Processing argument: $file"
    # If the target is a directory then it decompresses all files in it using same method.
    if [[ -d "$file" ]]; then
        debug "Argument is a directory"
        if $recursive; then
            debug "Recursive mode enabled, searching directory: $file"
            while IFS= read -r -d '' subfile; do
                process_file "$subfile"
            done < <(find "$file" -type f -print0)
        else
            debug "Recursive mode disabled, skipping directory"
            echo "Skipping directory: $file (use -r for recursive unpacking)"
            skipped_directories=$((skipped_directories + 1))
        fi
    else
        if $recursive; then
            debug "Recursive mode enabled, searching for file pattern"
            # If recursive and a file/pattern is given, search in current directory and below
            dir=$(dirname "$file")
            base=$(basename "$file")
            debug "Searching in directory: $dir for file: $base"
            while IFS= read -r -d '' subfile; do
                process_file "$subfile"
            done < <(find "$dir" -name "$base" -type f -print0)
        else
            debug "Processing single file"
            process_file "$file"
        fi
    fi
done

# ==============================================================================
# Command echos number of archives decompressed
# ==============================================================================
debug "Final counts - Decompressed: $decompressed_count, Failed: $failed_count, Skipped directories: $skipped_directories"
echo "Number of archives decompressed: $decompressed_count"

# ==============================================================================
# Command returns number of files it did NOT decompress
# ==============================================================================
total_failed=$((failed_count + skipped_directories))
echo "Number of files NOT decompressed: $total_failed"
exit $total_failed

# ==============================================================================
# Additional switches:
# -v - verbose - echo each file decompressed & warn for each file that was NOT decompressed
# -r - recursive - will traverse contents of folders recursively, performing unpack on each.
# -h - Should receive a HELP notice
# ==============================================================================

# ==============================================================================
# Recap of Test Requirements and Script Implementation:
# ==============================================================================
# 1. Write a bash script called extract: (Implemented - script name is extract)
# 2. unpack multiple packed files: (Implemented - Main loop and decompression logic)
# 3. traverse folders recursively: (Implemented - Recursive handling with `find`)
# 4. regardless of the specific algorithm: (Implemented - File type detection)
# 5. extract [-h] [-r] [-v] file [file...]: (Implemented - Argument parsing with `getopts`)
# 6. queries each target file: (Implemented - file command)
# 7. invokes the appropriate decompression command: (Implemented - Decompression Logic)
# 8. putting files in the same folder: (Implemented - unzip -d option)
# 9. files with the same name already exist, they are overwritten: (Implemented - unzip -o option)
# 10. Unpack should support 4 unpacking options: (Implemented - gunzip, bunzip2, unzip, uncompress)
# 11. Adding more options should be VERY simple: (Implemented - if/elif/else structure)
# 12. Note that file names and extensions have no meaning: (Implemented - file command)
# 13. If a target file is not compressed, the script takes no other action: (Implemented - else condition)
# 14. If the target is a directory then it decompresses all files in it using same method: (Implemented - Recursive handling)
# 15. Command echos number of archives decompressed: (Implemented - echo $decompressed_count)
# 16. Command returns number of files it did NOT decompress: (Implemented - exit $total_failed)
# 17. -v - verbose: (Implemented - Verbose output)
# 18. -r - recursive: (Implemented - Recursive handling)
# 19. -h - Should receive a HELP notice: (Implemented - Help Function)
# 20. Allow for arguments used by each compression command: (Implemented --gunzip-opts, etc.)
# NEEds to state - no file given
